<?xml version="1.0"?>
<launch>
  <arg name="limited" default="false"/>
  <arg name="paused" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="world_name" default="$(find o2ac_gazebo)/worlds/basic.world" />
  <arg name="extra_gazebo_args" default=""/>
  <!-- Gazebo needs to start up paused in order for us to be able to set the initial joint configurations.
       This is a known bug as of July 2018. -->

  <param name="use_gazebo_sim" type="bool" value="true" />

  <env name="GAZEBO_MODEL_PATH"
       value="$(find o2ac_parts_description):$(find o2ac_scene_description):$(find o2ac_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)" />

  <!-- startup simulated world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
    <!-- <arg name="verbose" value="true"/> -->
    </include>

  <!-- send robot urdf to param server -->
  <!-- In this case the "robot" is the ensemble of the 2 arms -->
  <include file="$(find o2ac_scene_description)/launch/base_scene_upload.launch">
    <arg name="gazebo" value="true"/>
  </include>

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <!-- Initial pose modified on 9 July 2018 -->
  <!-- Do not change this without updating the home pose in o2ac_base_scene.srdf accordingly. -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -param robot_description -model o2ac_bots
        -J a_bot_elbow_joint 1.4      -J a_bot_shoulder_lift_joint -2.1  -J a_bot_shoulder_pan_joint 1.57
        -J a_bot_wrist_1_joint -0.85  -J a_bot_wrist_2_joint -1.57       -J a_bot_wrist_3_joint 0
        -J b_bot_elbow_joint 1.4      -J b_bot_shoulder_lift_joint -2.1  -J b_bot_shoulder_pan_joint 1.57
        -J b_bot_wrist_1_joint -0.85  -J b_bot_wrist_2_joint -1.57       -J b_bot_wrist_3_joint 0
        -unpause" respawn="false" output="screen" />
  <include file="$(find o2ac_gazebo)/launch/controller_utils.launch"/>

  <remap from="/a_bot/cartesian_compliance_controller/ft_sensor_wrench" to="/a_bot/wrench/filtered"/>
  <remap from="/b_bot/cartesian_compliance_controller/ft_sensor_wrench" to="/b_bot/wrench/filtered"/>

  <!-- spawn controllers -->
  <rosparam file="$(find o2ac_gazebo)/controller/2_bot_controllers.yaml" command="load"/>
  <node name="controller_spawner" 
        pkg="controller_manager"
        type="spawner"
        args="b_bot/scaled_pos_joint_traj_controller b_bot/gripper_controller
              a_bot/scaled_pos_joint_traj_controller a_bot/gripper_controller"
        respawn="false" 
        output="screen"/>

  <!-- load other controller -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="--stopped a_bot/cartesian_compliance_controller b_bot/cartesian_compliance_controller"/>

  <!-- Launch camera multiplexer -->
  <arg name="camera0_name"	value="a_bot_inside_camera"/>
  <arg name="camera1_name"	value="a_bot_outside_camera"/>
  <arg name="camera2_name"	value="b_bot_inside_camera"/>
  <arg name="camera3_name"	value="b_bot_outside_camera"/>

  <arg name="multiplexer_name"	value="camera_multiplexer"/>
  <node name="$(arg multiplexer_name)"
  	pkg="aist_camera_multiplexer" type="aist_camera_multiplexer"
  	output="screen">
    <rosparam param="camera_names"
	      subst_value="true">[$(arg camera0_name),
                            $(arg camera1_name),
                            $(arg camera2_name),
                            $(arg camera3_name)]
    </rosparam>

    <remap from = "$(arg multiplexer_name)/$(arg camera0_name)/camera_info"
	         to   = "$(arg camera0_name)/color/camera_info"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera0_name)/image"
	         to   = "$(arg camera0_name)/color/image_raw"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera0_name)/depth"
	         to   = "$(arg camera0_name)/aligned_depth_to_color/image_raw"/>

    <remap from = "$(arg multiplexer_name)/$(arg camera1_name)/camera_info"
	         to   = "$(arg camera1_name)/color/camera_info"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera1_name)/image"
	         to   = "$(arg camera1_name)/color/image_raw"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera1_name)/depth"
	         to   = "$(arg camera1_name)/aligned_depth_to_color/image_raw"/>

    <remap from = "$(arg multiplexer_name)/$(arg camera2_name)/camera_info"
	         to   = "$(arg camera2_name)/color/camera_info"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera2_name)/image"
	         to   = "$(arg camera2_name)/color/image_raw"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera2_name)/depth"
	         to   = "$(arg camera2_name)/aligned_depth_to_color/image_raw"/>

    <remap from = "$(arg multiplexer_name)/$(arg camera3_name)/camera_info"
	         to   = "$(arg camera3_name)/color/camera_info"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera3_name)/image"
	         to   = "$(arg camera3_name)/color/image_raw"/>
    <remap from = "$(arg multiplexer_name)/$(arg camera3_name)/depth"
	         to   = "$(arg camera3_name)/aligned_depth_to_color/image_raw"/>
  </node>

  <node name="a_bot_ft_filter"
  	pkg="ur_control" type="ft_filter.py" args="-z -t wrench -ns a_bot"
  	output="screen"/>
  
  <node name="b_bot_ft_filter"
  	pkg="ur_control" type="ft_filter.py" args="-z -t wrench -t2 /dissect_knife_force  -ns b_bot"
  	output="screen"/>

   <include file="$(find ur3_gazebo)/launch/gazebo_to_tf.launch"/>
</launch>
